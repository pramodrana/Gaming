<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessTokenNotMatch" xml:space="preserve">
    <value>AccessToken in header does not match with the existing Token in Database against the userid</value>
  </data>
  <data name="BadRequest" xml:space="preserve">
    <value>BadRequest</value>
  </data>
  <data name="BadRequestFileMissing" xml:space="preserve">
    <value>Travel_Stats File missing</value>
  </data>
  <data name="BadRequestInvalidVehicleTypeID" xml:space="preserve">
    <value>Invalid VehicleTypeID</value>
  </data>
  <data name="BadRequestModeTypeIdMissing" xml:space="preserve">
    <value>ModeTypeId missing</value>
  </data>
  <data name="BadRequestPlatformMissing" xml:space="preserve">
    <value>Platform missing</value>
  </data>
  <data name="BadRequestPublicKeyInvalid" xml:space="preserve">
    <value>PublicKey invalid</value>
  </data>
  <data name="BadRequestPublicKeyMissing" xml:space="preserve">
    <value>PublicKey missing</value>
  </data>
  <data name="BadRequestTravelFileNameMissing" xml:space="preserve">
    <value>travelFileName missing</value>
  </data>
  <data name="BadRequestTravelIdMissing" xml:space="preserve">
    <value>TravelId missing</value>
  </data>
  <data name="BadRequestUserAddressIdMissing" xml:space="preserve">
    <value>UserAddressId missing</value>
  </data>
  <data name="BadRequestUserAddressMaxLimit" xml:space="preserve">
    <value>More than 5 records are not allowed, please remove the extra records</value>
  </data>
  <data name="BadRequestUserIdMissing" xml:space="preserve">
    <value>UserId missing</value>
  </data>
  <data name="BadRequestUVIdMissing" xml:space="preserve">
    <value>UserVehicleId missing</value>
  </data>
  <data name="BadRequestVehicleTypeIdMissing" xml:space="preserve">
    <value>VehicleTypeId missing</value>
  </data>
  <data name="BadRequestWidgetIdMissing" xml:space="preserve">
    <value>WidgetId missing</value>
  </data>
  <data name="ConsentBody" xml:space="preserve">
    <value>Our &lt;b&gt; &lt;a href='com.tvsm.connect.help.TermsActivity://?type=terms'&gt;Terms &amp;amp; Conditions&lt;/a&gt; &lt;/b&gt;have been updated please read and accept the Terms &amp;amp; Conditions to use your TVS Connect App.</value>
  </data>
  <data name="ConsentHeader" xml:space="preserve">
    <value>Attention!</value>
  </data>
  <data name="DbError" xml:space="preserve">
    <value>Error while accessing data from Database</value>
  </data>
  <data name="DbSaveError" xml:space="preserve">
    <value>Error while saving data in Database</value>
  </data>
  <data name="DifferentUserId" xml:space="preserve">
    <value>UserId in JSON body is not exact match with the header UserId</value>
  </data>
  <data name="EmptyFieldsFound" xml:space="preserve">
    <value>Empty Fields Found.</value>
  </data>
  <data name="ExpiredRefreshToken" xml:space="preserve">
    <value>Refresh Token is expired</value>
  </data>
  <data name="Failure" xml:space="preserve">
    <value>Failure</value>
  </data>
  <data name="FieldList" xml:space="preserve">
    <value>Field list</value>
  </data>
  <data name="ForbiddenError" xml:space="preserve">
    <value>Access Forbidden</value>
  </data>
  <data name="ForbiddenErrorRP" xml:space="preserve">
    <value>Forbidden</value>
  </data>
  <data name="GameCategoryCodeRequired" xml:space="preserve">
    <value>Game category code is required</value>
  </data>
  <data name="GameModeRequired" xml:space="preserve">
    <value>Game mode is required</value>
  </data>
  <data name="GamePointsRequired" xml:space="preserve">
    <value>Game points are required</value>
  </data>
  <data name="InternalServerError" xml:space="preserve">
    <value>Internal server error</value>
  </data>
  <data name="InvalidAccessToken" xml:space="preserve">
    <value>AccessToken is in-valid</value>
  </data>
  <data name="InvalidArgs" xml:space="preserve">
    <value>Invalid Arguments-</value>
  </data>
  <data name="InvalidBloodGroup" xml:space="preserve">
    <value>Please enter valid blood group</value>
  </data>
  <data name="InvalidData" xml:space="preserve">
    <value>Invalid Data</value>
  </data>
  <data name="InvalidRefreshToken" xml:space="preserve">
    <value>Invalid Refersh Token</value>
  </data>
  <data name="InvalidUserIdInQueryString" xml:space="preserve">
    <value>UsrId in Querystring parameter is not valid</value>
  </data>
  <data name="ItemNotFoundRP" xml:space="preserve">
    <value>ItemNotFound</value>
  </data>
  <data name="MissingToken" xml:space="preserve">
    <value>Refresh token or Access token is missing</value>
  </data>
  <data name="MissingUserId" xml:space="preserve">
    <value>UserId or AccessToken is missing in HEADER</value>
  </data>
  <data name="PageNumberRequired" xml:space="preserve">
    <value>Page number is required</value>
  </data>
  <data name="PageSizeRequired" xml:space="preserve">
    <value>Page size is required</value>
  </data>
  <data name="ParamParseError" xml:space="preserve">
    <value>Error while parsing input params</value>
  </data>
  <data name="RecordAlreadyAdded" xml:space="preserve">
    <value>RecordAlreadyAdded</value>
  </data>
  <data name="RecordDeleted" xml:space="preserve">
    <value>Record deleted successfully</value>
  </data>
  <data name="RecordNotFound" xml:space="preserve">
    <value>Record Not Found</value>
  </data>
  <data name="RecordSucessMessage" xml:space="preserve">
    <value>Record added successfully</value>
  </data>
  <data name="RecordUpdatedSuccessfully" xml:space="preserve">
    <value>Record updated successfully</value>
  </data>
  <data name="RefreshNAccessTokenDifferent" xml:space="preserve">
    <value>Refresh token and Access token are not of same user</value>
  </data>
  <data name="RefreshTokenNotMatch" xml:space="preserve">
    <value>Refresh Token in header does not match with the existing Token in Database against the userid</value>
  </data>
  <data name="SaveFileError" xml:space="preserve">
    <value>Error while saving file.</value>
  </data>
  <data name="SessionExpired" xml:space="preserve">
    <value>Session Expired</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
</root>